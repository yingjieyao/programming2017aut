选择排序
A、
描述：
给定一个数组具有n(n <= 1000)个数的数组，输出这个数组中最大值与最小值的位置。

输入：
多组样例。每组一行，每行第一个数字是n，后面是ｎ个整数(int 32表示范围内)。n=0表示输入数据的结束。
输出：
最大数与最小数出现的位置，中间用空格分隔。如果最大数出现多次，请输出它第一次出现的位置；如果最小数出现多次，请输出它最后一次出现的位置。

样例输入：
3 1 2 3
4 1 1 2 3
0
样例输出：
0 2
1 3

冒泡排序
B、
You want to processe a sequence of n distinct integers by swapping two adjacent sequence elements until the sequence is sorted in ascending order. Then how many times it need. 
For example, 1 2 3 5 4, we only need one operation : swap 5 and 4. 
The input consists of a number of test cases. Each case consists of two lines: the first line contains a positive integer n (n <= 1000); the next line contains a permutation of the n integers from 1 to n.
For each case, output the minimum times need to sort it in ascending order on a single line.
C、
描述：
对于冒泡排序，输出最少需要几趟就可以将数组有序。比如对于数组1 3 4 2，经过第一趟排序之后是1 3 2 4，
经过第二趟排序之后是1 2 3 4；那么只需要两趟排序就可以使得数组有序。

输入：
多组样例。每组的第一个数是一个数字n表示数组的元素个数，后面是n个整数。
输出：
经过多少趟冒泡排序可以使得数组有序。

样例输入：
4 1 3 4 2
样例输出：
2

插入排序
D、
我们在课上学过了如果一个数组的前n-1个数是有序，如何将第n个数插入到数组中并保持数组仍然有序。
现在的问题是，如何求得第n个数插入的位置。

输入：
第一行是一个整数T，表示有T组样例。
之后的每一行的第一个数字是n，后面是n个整数。其中前n-1个数字是有序的，最后一个数字是待插入的数字。

输出：
输出第n个数可以插入的最靠前和最靠后的位置。

样例输入：
2
5 1 3 4 5 2
3 2 2 2
样例输出：
1 1
0 2

E、绝对值排序
HDU 2020
输入n(n<=100)个整数，按照绝对值从大到小排序后输出。题目保证对于每一个测试实例，所有的数的绝对值都不相等。
输入数据有多组，每组占一行，每行的第一个数字为n,接着是n个整数，n=0表示输入数据的结束，不做处理。
对于每个测试实例，输出排序后的结果，两个数之间用一个空格隔开。每个测试实例占一行。
3 3 -4 2
4 0 1 2 -3
0

-4 3 2
-3 2 1 0