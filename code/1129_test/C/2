#include<stdio.h>
#include<algorithm>
using namespace std;
const int maxn=100005;
const int INF=0x3f3f3f3f;
int a[maxn],b[maxn],dpa[maxn],dpb[maxn],ma[maxn],mb[maxn];
int main()
{
    //dpa 数组  i下标表示 以ai为尾数的上升子序列的最大长度
    //ma i下标表示  长度为i的上升子序列的尾数最小值
    int T,k=0;
    scanf("%d",&T);
    while(T--)
    {
        k++;
        int n;
        scanf("%d",&n);
        for(int i=0; i<n; i++)
        {
            scanf("%d",&a[i]);
            b[n-1-i]=a[i];// 逆序保存在b数组中
        }
        ma[0]=-1e8;
        ma[1]=a[0];//初始化
        dpa[0]=1;//dpa i 指的是i下标为尾数的子序列的长度
        int maxlen=1;//定义最大长度
        for(int i=1; i<n; i++)
        {
            int l=0,r=maxlen,mid;
            if(ma[maxlen]<a[i])//若不存在数比它大则加一位
            {
                ma[++maxlen]=a[i];
                dpa[i]=maxlen;//将以a[i]为尾数的子序列的最大长度更新
            }
            else
            {
                r=maxlen;
                while(l<=r)
                {
                    mid=(l+r)/2;
                    if(ma[mid]<a[i])
                        l=mid+1;
                    else
                        r=mid-1;
                }//找出第一个大于a[i]的ma数组的下标
                ma[l]=a[i];//更新
                dpa[i]=l;// 更新该数的最大长度
            }
        }
        //对逆序数组重新求一遍 得到反向的lis
        mb[0]=-1e8;
        mb[1]=b[0];
        dpb[0]=1;
        maxlen=1;
        for(int i=1; i<n; i++)
        {
            int l=0,r=maxlen,mid;
            if(mb[maxlen]<b[i])
            {
                mb[++maxlen]=b[i];
                dpb[i]=maxlen;
            }
            else
            {
                r=maxlen;
                while(l<=r)
                {
                    mid=(l+r)/2;
                    if(mb[mid]<b[i])
                        l=mid+1;
                    else
                        r=mid-1;
                }
                mb[l]=b[i];
                dpb[i]=l;
            }
        }
        int res=0;
        for(int i=0; i<n; i++)//较小者为其有效值  所求长度还需*2-1
            res=max(res,2*(min(dpa[i],dpb[n-i-1]))-1);
        printf("Case %d: %d\n",k,res);
    }
}
