#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
int a,b,m;
int x[10007],y[10007],dp1[10007],dp2[10007];

int min(int a1,int b1)
{
    return a1<b1?a1:b1;
}

void ddp(int dp[],int z[])
{
   int top=0;
   int stack[10007];
   stack[top]=-10000007;
   for(b=1;b<=m;b++)
   {
       if(z[b]>stack[top])
       {
           stack[++top]=z[b];
           dp[b]=top;
       }
       else
       {
           int l=1,r=top;
       while(l<=r)//用二分法查找第一个比啊a[i]大的元素
       {
           int mid=(l+r)>>1;
           if(z[b]>stack[mid])
           {
               l=mid+1;
           }
           else r=mid-1;
       }
       stack[l]=z[b];
       dp[b]=l;
       }

   }
}

int main()
{
    while(scanf("%d",&m)!=EOF)
    {
        //memset(dp1,0,sizeof(dp1));
        //memset(dp2,0,sizeof(dp2));
        for(a=1;a<=m;a++)
        {
            scanf("%d",&x[a]);
            y[m-a+1]=x[a];
            dp1[a]=0;
            dp2[a]=0;
        }
        ddp(dp1,x);
        ddp(dp2,y);
        int max=-1,count;
        for(a=1;a<=m;a++)
        {
            count=min(dp1[a],dp2[m-a+1])*2-1;//因为要求递增序列与递减序列的个数相等，则取正反较小的一个
            if(count>max)
            {
                max=count;
            }
        }
        printf("%d\n",max);
    }
    return 0;
}
