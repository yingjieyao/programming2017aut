#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <algorithm>
#include <map>
#include <string>

using namespace std;
const int inf=0x3f3f3f3f;
int binsearch(int *a,int r,int key)
{
    int l=0;
    int mid=(l+r)/2;
    while(l<=r){
        if(a[mid]<key)
            l=mid+1;
        else if(a[mid]>key)
            r=mid-1;
        else
            return mid;
        mid=(l+r)/2;
    }
    return l;
}

int main()
{
    int n,i;
    while(~scanf("%d",&n)){
      int a[10010],b[10010],c[10010];//b保存的是以a[i]为结尾的最长递增子序列，c保存长度为i的递增子序列的最末的元素，c是单调递增的
      int a1[10010],b1[10010],c1[10010];//同上
      for(i=0;i<n;i++){
        scanf("%d",&a[i]);
        a1[n-i-1]=a[i];
      }
      for(i=0;i<n;i++)
        c[i]=inf;
      c[0]=-1;
      c[1]=a[0];//保存了长度为1时的递增序列的最末的元素，且此时长度为1的递增了序列只有一个，c[1]也是最小的;
      b[0]=1;//此时以a[0]结尾的最长递增子序列的长度为1.
      for(i=1;i<n;i++){
        int j=binsearch(c,n,a[i]);
        c[j]=a[i];
        b[i]=j;
      }
      for(i=0;i<n;i++)
        c1[i]=inf;
      c1[0]=-1;
      c1[1]=a1[0];
      b1[0]=1;
      for(i=1;i<n;i++){
        int j=binsearch(c1,n,a1[i]);
        c1[j]=a1[i];
        b1[i]=j;
      }
      int res=0;
      for(i=0;i<n;i++){
        res=max(res,min(b[i],b1[n-i-1]));
      }
      printf("%d\n",res*2-1);
    }
    return 0;
}
