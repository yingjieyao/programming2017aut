#include<cstdio>
#include<cstring>
#include
using namespace std;
const int N = 10005;
int a[N], in[N], de[N], s[N], m, n, top, pos;

int BinSearch (int k, int le, int ri)
{
    while (le <= ri)
    {
        m = (le + ri) >> 1;
        if (s[m] >= k) ri = m - 1;
        else le = m + 1;
    }
    return ri + 1;
}

void lis()
{
    memset (s, 0, sizeof (s));
    memset (in, 0, sizeof (in));
    s[1] = a[1];
    in[1] = top = 1;
    for (int i = 2; i <= n; ++i)
    {
        if (s[top] < a[i])
        {
            s[++top] = a[i];
            in[i] = top;
        }
        else
        {
            pos = BinSearch (a[i], 1, top);
            s[pos] = a[i];
            in[i] = pos;
        }
    }
}

void lds()
{
    memset (s, 0, sizeof (s));
    memset (de, 0, sizeof (de));
    s[1] = a[n];
    de[n] = top = 1;
    for (int i = n - 1; i >= 1; --i)
    {
        if (s[top] < a[i])
        {
            s[++top] = a[i];
            de[i] = top;
        }
        else
        {
            pos = BinSearch (a[i], 1, top);
            s[pos] = a[i];
            de[i] = pos;
        }
    }
}

int main()
{
    while (scanf ("%d", &n) != EOF)
    {
        for (int i = 1; i <= n; ++i)
            scanf ("%d", &a[i]);
        int ans = 1;
        lis();
        lds();
        for (int i = 1; i <= n; ++i)
        {
            if (min (de[i], in[i]) > ans)
                ans = min (de[i], in[i]);
        }
        printf ("%d\n", ans * 2 - 1);
    }
    return 0;
}
